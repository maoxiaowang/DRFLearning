import yaml
from django.apps import apps
from django.contrib.auth import get_permission_codename
from django.contrib.contenttypes.models import ContentType
from django.core.management.base import BaseCommand, CommandError

from main.management.commands.init_users import USER_PERMS_DIR, GROUP_PERMS_DIR
from main.models import Group, Permission, User

APP_LIST = [
    'base',
    'identity',
    'service'
]


def _get_builtin_permissions(opts):
    """
    Return (codename, name) for all autogenerated permissions.
    By default, this is ('add', 'change', 'delete', 'view')
    """
    perms = list()
    for action in opts.default_permissions:
        perms.append((
            get_permission_codename(action, opts),
            'Can %s %s' % (action, opts.verbose_name_raw)
        ))
    return perms


class Command(BaseCommand):

    def handle(self, *args, **options):
        # 更新permission name（描述）
        perms_from_db = [
            {
                'codename': perm_obj.codename, 'name': perm_obj.name,
                'app_label': perm_obj.content_type.app_label,
                'model': perm_obj.content_type.model
            }
            for perm_obj in Permission.objects.all()
            if perm_obj.content_type.app_label in APP_LIST
        ]
        changed_count = 0
        # get all model perms
        all_model_perms = list()
        for app_label in APP_LIST:
            for model_name in apps.all_models[app_label]:
                # special case
                # if app_label == 'auth' and model_name == 'permission':
                #     model = apps.get_model('identity.Permission')
                # elif app_label == 'auth' and model_name == 'group':
                #     model = apps.get_model('identity.Group')
                # else:
                model = apps.get_model(app_label, model_name)

                # New perms
                _meta = getattr(model, '_meta')
                permissions = list(_meta.permissions)
                builtin_permissions = _get_builtin_permissions(_meta)
                permissions.extend(builtin_permissions)
                for codename, name in set(permissions):
                    if app_label in APP_LIST:
                        all_model_perms.append(
                            {'app_label': app_label, 'codename': codename,
                             'model': _meta.model_name}
                        )
                    # Old perms
                    for perm in perms_from_db:
                        # if perm['codename'] == 'list_permission':
                        #     print(perm['app_label'])

                        if all((perm['codename'] == codename, perm['app_label'] == app_label)):
                            if perm['name'] != name:
                                try:
                                    perm_obj = Permission.objects.get(
                                        codename=codename, content_type__model=_meta.model_name,
                                        content_type__app_label=app_label)
                                except Permission.DoesNotExist:
                                    continue
                                perm_obj.name = name
                                perm_obj.save()
                                changed_count += 1
                                self.stdout.write(
                                    '  Updating permission from %(old_name)s to %(new_name)s... ' %
                                    {'old_name': perm['name'], 'new_name': name} + self.style.SUCCESS('OK')
                                )
        if changed_count:
            self.stdout.write(
                '  Permission name updated done: %d updated.' % changed_count
            )

        # 清除多余失效权限
        redundant_count = 0
        for perm in perms_from_db:
            found = False
            for mp in all_model_perms:
                if all((mp['app_label'] == perm['app_label'],
                        mp['model'] == perm['model'], mp['codename'] == perm['codename'])):
                    found = True
                    break

            if not found:
                try:
                    count, data = Permission.objects.filter(
                        codename=perm['codename'], content_type__app_label=perm['app_label'],
                        content_type__model=perm['model']).delete()
                except Exception as e:
                    raise CommandError(e)
                else:
                    redundant_count += count
                    self.stdout.write(
                        '  Cleaning redundant permission %(perm_name)s (%(model_name)s)... ' %
                        {'perm_name': '%(app_label)s.%(codename)s' % perm, 'model_name': perm['model']} +
                        self.style.SUCCESS('OK'))
        if redundant_count:
            self.stdout.write(
                '  Redundant permission cleaned done: %d cleaned.' % redundant_count
            )

        self.stdout.write(self.style.SUCCESS('  Permissions have been updated.'))

        """
        用户权限
        """
        users = list()
        for perm_file in USER_PERMS_DIR.iterdir():
            if perm_file.is_file() and perm_file.name.endswith('.yaml'):
                try:
                    user = User.objects.get(username=perm_file.stem)
                except User.DoesNotExist:
                    continue

                with open(perm_file) as f:
                    user_perms = yaml.load(f, yaml.CLoader)
                users.append(
                    {'user': user, 'user_perms': user_perms,
                     'perms_path': perm_file.absolute()}
                )

        for item in users:
            # 角色标准权限，identity/etc/group_perms下
            user = item['user']
            standard_user_perms = item['user_perms']
            perms_path = item['perms_path']
            username = user.username

            standard_user_perms_list = list()
            app_label_list = list()
            for app_label, codenames in standard_user_perms.items():
                if app_label in app_label_list:
                    raise CommandError(
                        f'Duplicated app label {app_label}. Please check {perms_path} to fix this issue.'
                    )
                app_label_list.append(app_label)
                codename_list = list()
                for codename in codenames:
                    if codename in codename_list:
                        # duplicated code name
                        raise CommandError(
                            f'Duplicated code name {app_label}.{codename}. Please check {perms_path} to fix this issue.'
                        )
                    codename_list.append(codename)
                    standard_user_perms_list.append(f'{app_label}.{codename}')

            # 角色现有权限
            current_user_perms = [
                f'{item.content_type.app_label}.{item.codename}' for item in user.user_permissions.all()
            ]

            # 清理不存在（残留）的角色权限
            cleaned_count = 0
            for user_perm in current_user_perms:
                if user_perm not in standard_user_perms_list:
                    a, c = user_perm.split('.')
                    perms = Permission.objects.filter(codename=c, content_type__app_label=a)
                    if perms.exists():
                        p = perms.first()
                        self.stdout.write(
                            self.style.MIGRATE_LABEL(
                                f'  Found invalid user ({username}) permission '
                                f'{p.content_type.app_label}.{p.codename}, trying to clean it...')
                        )

                        user.user_permissions.remove(p.id)
                        cleaned_count += 1
            if cleaned_count:
                self.stdout.write(
                    self.style.SUCCESS(('  Invalid user permissions cleaned done: %d cleaned.' % cleaned_count))
                )

            # 重新获取角色权限
            all_user_perms = [
                f'{p.content_type.app_label}.{p.codename}' for p in user.user_permissions.all()]

            if len(all_user_perms) < len(standard_user_perms_list):
                missing_perms = [p for p in standard_user_perms_list if p not in all_user_perms]
                self.stdout.write(
                    self.style.MIGRATE_LABEL(
                        '  Found %d missing user permissions: \n    ' % len(missing_perms)
                    ) + '- ' + '\n    - '.join(missing_perms)
                )

                abnormal_count = 0
                for ap in missing_perms:
                    app_label, codename = ap.split('.')
                    try:
                        perm = Permission.objects.get(codename=codename, content_type__app_label=app_label)
                    except Permission.MultipleObjectsReturned:
                        _perms = Permission.objects.filter(
                            codename=codename, content_type__app_label=app_label
                        )
                        self.stdout.write(
                            self.style.WARNING(f'  Found {_perms.count()} duplicated permissions.')
                        )
                        for _perm in _perms:
                            content_type = _perm.content_type
                            model_cls = content_type.model_class()
                            _meta = getattr(model_cls, '_meta')
                            _permissions = [p[0] for p in _meta.permissions]
                            _builtin_permissions = [p[0] for p in _get_builtin_permissions(_meta)]
                            _permissions.extend(_builtin_permissions)
                            if codename not in _permissions:
                                _perm.delete()
                                self.stdout.write(
                                    self.style.SUCCESS(f'  Duplicated permission %s has been removed.' % ap)
                                )
                        _perms = Permission.objects.filter(codename=codename, content_type__app_label=app_label)
                        if _perms.count() > 1:
                            raise CommandError(
                                'Duplicated permissions found: %s. Please check and repair permissions '
                                'on your models. Then migrate and try again.' % ap
                            )
                    except Permission.DoesNotExist:
                        self.stdout.write(
                            self.style.WARNING('  Missing group permission fix interrupted: %d fixed.' % abnormal_count)
                        )
                        raise CommandError(
                            'Permission %s is an invalid permission. \n'
                            'Please check %s to fix this or try to execute migrate commands '
                            'first to initialize permissions.'
                            % (ap, perms_path)
                        )
                    else:
                        user.user_permissions.add(perm)
                        self.stdout.write(
                            '  Assigning permission %(perm_name)s to user "%(username)s"... ' %
                            {'perm_name': ap, 'username': username} + self.style.SUCCESS('OK'))
                        abnormal_count += 1
                self.stdout.write(
                    self.style.SUCCESS('  Missing user permission fix done: %d fixed.' % abnormal_count)
                )
            elif len(all_user_perms) > len(standard_user_perms_list):
                redundant_perms = [p for p in standard_user_perms_list if p not in all_user_perms]
                self.stdout.write(
                    self.style.MIGRATE_LABEL(
                        '  Found %d redundant user permissions: \n    ' % len(redundant_perms)
                    ) + '- ' + '\n    - '.join(redundant_perms)
                )
                redundant_count = 0
                for rp in redundant_perms:
                    app_label, codename = rp.split('.')
                    try:
                        deleted_count, _ = Permission.objects.filter(
                            codename=codename, content_type__app_label=app_label
                        ).delete()
                    except Exception:
                        self.stdout.write(
                            self.style.WARNING(
                                '  Redundant group permission fix interrupted: %d fixed.' % redundant_count
                            )
                        )
                        raise CommandError(
                            'Permission %s is an invalid permission. '
                            'Please check %s to fix this.'
                            % (rp, perms_path)
                        )
                    else:
                        redundant_count += deleted_count
                        self.stdout.write(
                            '  Deleting redundant permission %(perm_name)s from user "%(username)s"... ' %
                            {'perm_name': rp, 'username': username} + self.style.SUCCESS('OK')
                        )
                self.stdout.write(
                    self.style.SUCCESS('  Redundant user permission fix done: %d fixed.' % redundant_count)
                )

        self.stdout.write(self.style.SUCCESS('  User permissions have been updated.'))

        """
        组权限
        """

        # 初始化组
        initial_groups = list()

        for perm_file in GROUP_PERMS_DIR.iterdir():
            if perm_file.is_file() and perm_file.name.endswith('.yaml'):
                try:
                    group = Group.objects.get(name=perm_file.stem)
                except Group.DoesNotExist:
                    continue
                with open(perm_file) as f:
                    group_perms = yaml.load(f, yaml.CLoader)
                initial_groups.append(
                    {'group': group, 'group_perms': group_perms or {},
                     'perms_path': perm_file.absolute()}
                )

        for item in initial_groups:
            # 角色标准权限，APP/etc/group_perms下
            group = item['group']
            standard_group_perms = item['group_perms']
            perms_path = item['perms_path']
            group_name = group.name

            standard_group_perms_list = list()
            app_label_list = list()
            for app_label, codenames in standard_group_perms.items():
                if app_label in app_label_list:
                    raise CommandError('Duplicated app label %s. Please check %s to fix this issue.' %
                                       (app_label, perms_path))
                app_label_list.append(app_label)
                codename_list = list()
                for codename in codenames:
                    if codename in codename_list:
                        # duplicated code name
                        raise CommandError('Duplicated code name %s.%s. Please check %s to fix this issue.' %
                                           (app_label, codename, perms_path))
                    codename_list.append(codename)
                    standard_group_perms_list.append('%s.%s' % (app_label, codename))

            # 角色现有权限
            current_group_perms = ['%s.%s' % (item.content_type.app_label, item.codename) for
                                   item in group.permissions.all()]

            # 清理不存在（残留）的角色权限
            cleaned_count = 0
            for group_perm in current_group_perms:
                if group_perm not in standard_group_perms_list:
                    a, c = group_perm.split('.')
                    perms = Permission.objects.filter(codename=c, content_type__app_label=a)
                    if perms.exists():
                        p = perms.first()
                        self.stdout.write(
                            self.style.MIGRATE_LABEL(
                                '  Found invalid group (%s) permission \'%s.%s\', trying to clean it...' %
                                (group_name, p.content_type.app_label, p.codename)))

                        group.permissions.remove(p.id)
                        cleaned_count += 1
            if cleaned_count:
                self.stdout.write(
                    self.style.SUCCESS(('  Invalid group permissions cleaned done: %d cleaned.' % cleaned_count)))

            # 重新获取角色权限
            all_group_perms = ['%s.%s' % (item.content_type.app_label, item.codename) for
                               item in group.permissions.all()]

            if len(all_group_perms) < len(standard_group_perms_list):
                missing_perms = [item for item in standard_group_perms_list if item not in all_group_perms]
                self.stdout.write(
                    self.style.MIGRATE_LABEL(
                        '  Found %d missing group permissions: \n    ' % len(missing_perms)
                    ) + '- ' + '\n    - '.join(missing_perms)
                )

                abnormal_count = 0
                for ap in missing_perms:
                    app_label, codename = ap.split('.')
                    try:
                        perm = Permission.objects.get(codename=codename, content_type__app_label=app_label)
                    except Permission.MultipleObjectsReturned:
                        _perms = Permission.objects.filter(codename=codename, content_type__app_label=app_label)
                        self.stdout.write(
                            self.style.WARNING(f'  Found {_perms.count()} duplicated user permissions.')
                        )
                        for _perm in _perms:
                            content_type = _perm.content_type
                            model_cls = content_type.model_class()
                            _meta = getattr(model_cls, '_meta')
                            _permissions = [item[0] for item in _meta.permissions]
                            _builtin_permissions = [item[0] for item in _get_builtin_permissions(_meta)]
                            _permissions.extend(_builtin_permissions)
                            if codename not in _permissions:
                                _perm.delete()
                                self.stdout.write(
                                    self.style.SUCCESS(f'  Duplicated user permission %s has been removed.' % ap)
                                )
                        _perms = Permission.objects.filter(codename=codename, content_type__app_label=app_label)
                        if _perms.count() > 1:
                            raise CommandError(
                                'Duplicated permissions found: %s. Please check and repair permissions '
                                'on your models. Then migrate and try again.' % ap
                            )
                    except Permission.DoesNotExist:
                        self.stdout.write(
                            self.style.WARNING('  Missing group permission fix interrupted: %d fixed.' % abnormal_count)
                        )
                        raise CommandError(
                            'Permission %s is an invalid permission. \n'
                            'Please check %s to fix this or try to execute migrate commands '
                            'first to initialize permissions.'
                            % (ap, perms_path)
                        )
                    else:
                        group.permissions.add(perm)
                        self.stdout.write(
                            '  Assigning permission %(perm_name)s to group "%(group_name)s"... ' %
                            {'perm_name': ap, 'group_name': group_name} + self.style.SUCCESS('OK'))
                        abnormal_count += 1
                self.stdout.write(
                    self.style.SUCCESS('  Missing group permission fix done: %d fixed.' % abnormal_count)
                )
            elif len(all_group_perms) > len(standard_group_perms_list):
                redundant_perms = [item for item in standard_group_perms_list if item not in all_group_perms]
                self.stdout.write(
                    self.style.MIGRATE_LABEL(
                        '  Found %d redundant group permissions: \n    ' % len(redundant_perms)
                    ) + '- ' + '\n    - '.join(redundant_perms)
                )
                redundant_count = 0
                for rp in redundant_perms:
                    app_label, codename = rp.split('.')
                    try:
                        deleted_count, _ = Permission.objects.filter(
                            codename=codename, content_type__app_label=app_label
                        ).delete()
                    except Exception:
                        self.stdout.write(
                            self.style.WARNING(
                                '  Redundant group permission fix interrupted: %d fixed.' % redundant_count
                            )
                        )
                        raise CommandError(
                            'Permission %s is an invalid permission. '
                            'Please check %s to fix this.'
                            % (rp, perms_path)
                        )
                    else:
                        redundant_count += deleted_count
                        self.stdout.write(
                            '  Deleting redundant permission %(perm_name)s from group "%(group_name)s"... ' %
                            {'perm_name': rp, 'group_name': group_name} + self.style.SUCCESS('OK')
                        )
                self.stdout.write(
                    self.style.SUCCESS('  Redundant group permission fix done: %d fixed.' % redundant_count)
                )

        self.stdout.write(self.style.SUCCESS('  Group permissions have been updated.'))

        # 清理失效的ContentTypes
        content_types = ContentType.objects.all()
        invalid_cts = list()
        for ct in content_types:
            if ct.model not in apps.all_models[ct.app_label]:
                invalid_cts.append('%s.%s' % (ct.app_label, ct.model))
        if invalid_cts:
            self.stdout.write(
                self.style.MIGRATE_LABEL('  Found %d invalid content types: \n    ' % len(invalid_cts))
                + '- ' + '\n    - '.join(invalid_cts)
            )
            invalid_ct_count = 0
            for ct in invalid_cts:
                app_label, model = ct.split('.')
                ContentType.objects.get(app_label=app_label, model=model).delete()
                self.stdout.write(
                    '  Deleting invalid content type "%(content_type)s"... ' % {'content_type': ct} +
                    self.style.SUCCESS('OK')
                )
                invalid_ct_count += 1
            self.stdout.write(
                self.style.SUCCESS('  Invalid content type cleaned done: %d cleaned' % invalid_ct_count)
            )
        self.stdout.write(self.style.SUCCESS('  Content types have been updated.'))
