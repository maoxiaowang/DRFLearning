"""
Django settings for DRFLearning project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from datetime import timedelta
from pathlib import Path

from common.core.settings import project_settings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-2y%bgxcw93ei8+oz%-z3ijst-yeuj@6fhqph!5s2e+l_%m7b1m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = project_settings.default.debug

ALLOWED_HOSTS = ['*']

# To remove local port of next and previous addresses
USE_X_FORWARDED_HOST = True

# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django_celery_beat',
    'rest_framework',
    'rest_framework_simplejwt',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main.apps.MainConfig',
    'apiv1.apps.Apiv1Config',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'DRFLearning.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

CORS_ORIGIN_WHITELIST = []

WSGI_APPLICATION = 'DRFLearning.wsgi.application'
ASGI_APPLICATION = 'DRFLearning.asgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'ATOMIC_REQUESTS': True,
        'NAME': project_settings.mysql.name,
        'USER': project_settings.mysql.user,
        'PASSWORD': project_settings.mysql.password,
        'HOST': project_settings.mysql.host,
        'PORT': project_settings.mysql.port,
        'OPTIONS': {
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4'
        },
        'TEST': {
            'CHARSET': 'utf8mb4',
            'COLLATION': 'utf8mb4_general_ci'
        }
    }
}

# Caches
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": project_settings.redis.default_location,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PICKLE_VERSION": -1,  # Use the latest protocol version
            "SOCKET_CONNECT_TIMEOUT": 3,  # set connection time out in seconds
            "SOCKET_TIMEOUT": 3,  # operation timeout in seconds
            "CONNECTION_POOL_KWARGS": {"max_connections": 10000},
            "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor",
        }
    },
}

# Authentication

AUTH_USER_MODEL = 'main.User'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = project_settings.security.password_validators

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

LANGUAGES = (
    ('en-us', 'English'),
    ('zh-hans', '简体中文'),
)

LOCALE_PATHS = (
    Path(BASE_DIR) / 'locale',
)

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# File Storage

DEFAULT_FILE_STORAGE = 'common.core.storage.UnReadingS3Storage'
STATICFILES_STORAGE = 'django_s3_storage.storage.StaticS3Storage'

AWS_S3_ENDPOINT_URL = project_settings.storage.endpoint_url
AWS_ACCESS_KEY_ID = project_settings.storage.access_key
AWS_SECRET_ACCESS_KEY = project_settings.storage.secret_key
AWS_S3_BUCKET_NAME = project_settings.storage.bucket_name
AWS_S3_BUCKET_AUTH = False
AWS_S3_FILE_OVERWRITE = True

AWS_S3_ENDPOINT_URL_STATIC = project_settings.storage.endpoint_url
AWS_S3_BUCKET_NAME_STATIC = 'static'
AWS_S3_BUCKET_AUTH_STATIC = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    Path(BASE_DIR).joinpath('static'),
)

MEDIA_ROOT = Path(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Rest framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'common.permissions.BaseModelPermissions'
    ],
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
    'EXCEPTION_HANDLER': 'common.exceptions.handlers.exception_handler',
    'DEFAULT_PAGINATION_CLASS': 'common.core.paginator.PageNumberPagination',
    'PAGE_SIZE': 10,
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),
    'ROTATE_REFRESH_TOKENS': True,
    'UPDATE_LAST_LOGIN': True,
    'SIGNING_KEY': SECRET_KEY,
}

# Celery

CELERY_BROKER_URL = 'redis://127.0.0.1:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/1'
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_TASK_RESULT_EXPIRES = 3600
CELERY_ENABLE_UTC = True
CELERYD_FORCE_EXECV = True
CELERYD_TASK_TIME_LIMIT = 10 * 60
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
CELERY_BEAT_SCHEDULE = {}

# Logging

LOG_DIR = Path(project_settings.default.log_dir)
LOG_DIR.mkdir(exist_ok=True, parents=True)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'request_id': {
            '()': 'common.logging.RequestIDFilter',
        },
    },
    'formatters': {
        'standard.request_id': {
            'format': '%(levelname)-4s[%(asctime)s][req-%(request_id)s]%(filename)s:%(message)s'  #
        },
        'standard': {
            'format': '%(levelname)-4s[%(asctime)s]%(filename)s:%(message)s'
        },
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[{server_time}]{message}',
            'style': '{',
        }
    },
    'handlers': {
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'filters': ['require_debug_true'],
        },
        'apiv1': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_DIR / 'apiv1.log',
            'formatter': 'standard',
            'maxBytes': 1024 * 1024 * 50,
            'backupCount': 10
        },
        'task': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_DIR / 'task.log',
            'formatter': 'standard',
            'maxBytes': 1024 * 1024 * 50,
            'backupCount': 10
        },
        'command': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_DIR / 'command.log',
            'formatter': 'standard',
            'maxBytes': 1024 * 1024 * 50,
            'backupCount': 10
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'django.server': {
            'handlers': ['django.server'],
            'level': 'INFO',
            'propagate': False,
        },
        'apiv1': {
            'handlers': ['apiv1'],
            'level': 'DEBUG',
            'propagate': False
        },
        'task': {
            'handlers': ['task'],
            'level': 'DEBUG',
            'propagate': False
        },
        'command': {
            'handlers': ['command'],
            'level': 'DEBUG',
            'propagate': False
        },
    }
}
